# Tests that rely on the committed code, without needing the docker images to be built
name: test code

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  PGUSER: postgres

concurrency:
  group: test-code-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: make install_dev_tools
      - run: make stop_pg # cleanly stop the database, otherwise it will complain in the subsequent jobs
      - run: yarn install --frozen-lockfile
        working-directory: ./app

  trivy-scan-code:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          exit-code: "0"
          ignore-unfixed: false
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  codeql-scan:
    name: codeql-scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]
        os: ["linux"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  pre-commit:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: set pre-commit cache directory
        run: |
          echo "PRE_COMMIT_HOME=$GITHUB_WORKSPACE/.pre-commit-cache" >> $GITHUB_ENV
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - name: create commitlint COMMIT_EDITMSG if not exists
        run: |
          if test -f ".git/COMMIT_EDITMSG"; then
              echo "COMMIT_EDITMSG EXISTS, skipping"
          else
              touch .git/COMMIT_EDITMSG
          fi
      - uses: actions/cache@v2
        with:
          path: |
            ./.pre-commit-cache
          key: pre-commit-${{ env.PY }}-${{ hashFiles('.pre-commit-config.yaml') }}-v3
      - run: pre-commit run --all-files

  db-tests:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: make db_unit_tests
      - run: make db_style_tests
  # zap-owasp:
  #   needs: ["docker-build", "install-dev-tools"]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: dev env setup
  #       uses: ./.github/actions/dev-env-setup
  #     - name: run app locally
  #       uses: ./.github/actions/local-app-run
  #     - name: ZAP Base Scan
  #       uses: zaproxy/action-baseline@v0.6.1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         docker_name: "owasp/zap2docker-stable"
  #         target: "http://localhost:3004/"
  #         rules_file_name: ".zap/rules.tsv"
  #         cmd_options: "-a -d -T 5 -m 2"
  #         issue_title: OWASP Baseline
  #         fail_action: false
